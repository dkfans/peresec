PE/DLL rebuilder of Relocation and Export Section (PeRESec)
-------------------------------

This program rewrites export section and relocations
 in a DLL file, using a .MAP file to get new entries.

It works with all DLL files which have PE header.

It may be used to make more/less exports or relocations
 in a .DLL file if its source code is not available.
 It can also be used to help changing EXE file into DLL.

warning:
 This program may damage your DLL file; make backup
  before using it! There's no guarantee it will work.

legal:
 Please note that license agreement of many commercial
  programs prohibits modification to the code.
 Check the product license agreement and your local law
  before using this tool on program for which you don't
  own copyrights.
 Note that in some countries, modifying code can't be
  completely prohibited by software license agreement.

usage:
    peresec [options] <filename>
where <filename> should be the input PE file, and [options] are:
    -v,--verbose              Verbose console output mode.
                              Displays more messages and hints.
    -x,--extract              Extract data from input file.
                              This option completely changes function of
                              PeRESec - instead of creating .DLL from data
                              in .MAP and .RMAP file, it creates the .MAP
                              and .RMAP file based on data from input file.
    -o<file>,--output<file>   Output file name. If not specified, the name
                              is same as input file name, but ends with .DLL.
    -n<text>,--modname<text>  Module name for export table. This name will be
                              used as name of the DLL module stored inside
                              export table. Its relevance is minimal; by default
                              the input file name without extension is used.
    -m<file>,--map<file>      Input .MAP file name. If not specified, the name
                              is same as input file name, but ends with .MAP.
    -r<file>,--rmap<file>     Input .RMAP file name. If not specified, relocation
                              table is not affected by PeRESec (stays unchanged).
    -f<file>,--def<file>      Output .DEF file name. If not specified, the name
                              is same as input file name, but ends with .DEF.
    -p<text>,--prefix<text>   Function names prefix. All exports from .MAP file
                              will be preceded by this prefix before writing to
                              export section of .DLL file.
    -e<format>,--deff<format> Format of .DEF. By default, .DEF is compatible with
                              DLLTOOL of GNU suite. Instead, <format> can be mslib
                              which makes .DEF VisualStudio LIB compatible.

input files (if not in "--extract" mode):
    .EXE and .MAP, optionally also .RMAP files

output files (if not in "--extract" mode):
    .DLL and .DEF files

The program clears previous export table in .DLL file
 and replaces it with new one, made using entries from
 .MAP file. If there's no export section in the file,
 then it is created, and its size is matched to the
 functions in .MAP file.
Optionally, the program can also create/update relocation
 table inside .DLL, using .RMAP file as input.

The .MAP file is generated by many compilers, but also
 some disassemblers can make it, for example IDA Pro.
Even if you don't have a program that generates it,
 it's relatively easy to write this file by hand.
The .RMAP file can be generated using "-x" option,
 then it's easy to modify it using any text editor.

Generated .DEF file may be needed to compile programs
 which uses the DLL. Not all compilers require .DEF
 file, but most of them do. If you won't specify a
 .DEF file name, then it will be assumed that it should
 have same file name as output file, but with .def
 extension.

example map file:
 The map file is a text file which defines one export
  table entry per line. Here is an example of one-line
  file (only one entry exported):
<CUT HERE>
 0001:000DBE80       WinMain@16
<CUT HERE>
 As you can see, the structure of every line is:
 seg:offset          function_name

Note that format of the function_name may be different
 for functions compiled with various calling conventions.
For example __stdcall comes in the format same as above:
 name@args. But __cdecl should be named without arguments.

example of use 1:
  peresec -v -o"keeperfx.dll" -p"_DK_" "keeper95_gold.dll"

This command will create "keeperfx.dll" and "keeperfx.def"
 from "keeper95_gold.dll" and "keeper95_gold.map".
All function names inside DLL will be preceded by "_DK_".
Relocation section will not be modified by this call.

example of use 2:
  peresec -v -x -r"framebuf.rmap" "framebuf.dll"

This command will create "framebuf.rmap" and "framebuf.map"
 from "framebuf.dll". If any of the output files exists,
 they will be overwritten. Note that while you don't have to
 always type name of .MAP file, the .RMAP file will only be
 created if you will supply PeRESec with its name. 

Version: 1.1.0
 Added "--extract" command which reverses the program function
 Added relocation table exporting and rebuilding support
 Project name changed (but shortcut stays as PeRESec)

Version: 1.0.9
 Switched compiler IDE to Eclipse for C++
 Created better makefile and directory structure
 Renamed and renewed version information file
 The "is a dynamic library" characteristics flag is now set

Version: 1.0.8
 Some of the messages are now shown only in verbose mode
 Better auto-creation of export module name
 Module name can be changed from command line
 If export section doesn't exist, it is now auto-created

Version: 1.0.7
 Code divided into more functions
 More of the processing takes place in memory
 New command line parameters parser
 More command line parameters available

Version: 1.0.6
 Better management of the section space
 Displays information about usage of section space
 Versioning system updated
 Fixed exports sorting algorithm issue

Version: 1.0.5
 Works with all PE-based DLLs
 Project renamed to PeRESec

Version: 1.0.4
 Completely updates section header
 Rewrites whole section, fills unused space with 0
 Fixed mistake in free space checking

Version: 1.0.0
 Rebuilds names, ordinals and offsets
 Works with KeeperFX only
 Project name is KeeperFX_EC

Author:
Tomasz Lis
